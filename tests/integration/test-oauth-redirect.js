// Test script to verify OAuth callback redirect URL generation
import fetch from 'node-fetch';

async function testOAuthCallback() {
  try {
    console.log('üß™ Testing OAuth callback with real backend...\n');

    // Test 1: Get a real Gmail OAuth URL
    console.log('1. Getting real Gmail OAuth URL...');
    const authResponse = await fetch('http://localhost:3005/test/gmail/auth');
    const authResult = await authResponse.json();

    if (authResult.success && authResult.authUrl) {
      console.log('‚úÖ Gmail OAuth URL generated successfully');
      console.log('üîó OAuth URL type:', typeof authResult.authUrl);
      console.log('üîó OAuth URL value:', authResult.authUrl);

      // Extract the redirect URI from the OAuth URL
      const authUrlString = typeof authResult.authUrl === 'string' ? authResult.authUrl : JSON.stringify(authResult.authUrl);
      const redirectUriMatch = authUrlString.match(/redirect_uri=([^&]*)/);
      if (redirectUriMatch) {
        const decodedRedirectUri = decodeURIComponent(redirectUriMatch[1]);
        console.log('üìç Decoded redirect URI:', decodedRedirectUri);

        if (decodedRedirectUri === 'http://localhost:3005/auth/google/callback') {
          console.log('‚úÖ OAuth URL correctly points to main callback route');
        } else {
          console.log('‚ùå OAuth URL points to unexpected callback route');
        }
      }
    } else {
      console.log('‚ùå Failed to get Gmail OAuth URL');
    }

    // Test 2: Simulate successful OAuth callback
    console.log('\n2. Testing OAuth callback with mock successful response...');

    // Create a mock successful OAuth response to test template literal
    const frontendUrl = 'http://localhost:5174';
    const nonce = 'test-nonce';

    // This is exactly what should be generated by the server
    const mockSuccessResponse = `
            <html>
              <head>
                <title>Authentication Successful</title>
              </head>
              <body>
                <div class="oauth-success-container">
                  <h2>‚úÖ Google Authentication Successful!</h2>
                  <p>You have successfully authenticated with Google Calendar and Gmail.</p>
                  <p>Redirecting back to your AI Daily Assistant...</p>
                  <div class="spinner-container">
                    <div class="spinner"></div>
                  </div>
                </div>
                <style nonce="${nonce}">
                  .oauth-success-container {
                    font-family: Arial, sans-serif;
                    padding: 20px;
                    text-align: center;
                  }
                  .spinner-container {
                    margin-top: 20px;
                  }
                  .spinner {
                    display: inline-block;
                    width: 20px;
                    height: 20px;
                    border: 2px solid #3498db;
                    border-top: 2px solid transparent;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                  }
                  @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                  }
                </style>
                <script nonce="${nonce}">
                  console.log('OAuth callback: Starting redirect to frontend...');
                  // Redirect to frontend with success parameter
                  setTimeout(() => {
                    console.log('OAuth callback: Redirecting to ${frontendUrl}?auth=success');
                    window.location.href = '${frontendUrl}?auth=success';
                  }, 2000);
                </script>
              </body>
            </html>
          `;

    // Extract the redirect URL from the mock response
    const redirectMatch = mockSuccessResponse.match(/window\.location\.href = '([^']+)'/);
    if (redirectMatch) {
      console.log('‚úÖ Mock OAuth callback redirect URL:', redirectMatch[1]);

      if (redirectMatch[1].includes('[object Object]')) {
        console.log('‚ùå PROBLEM: Mock redirect URL contains [object Object]');
      } else if (redirectMatch[1] === 'http://localhost:5173?auth=success') {
        console.log('‚úÖ Mock redirect URL is perfect!');
      } else {
        console.log('‚ö†Ô∏è  Mock redirect URL is unexpected:', redirectMatch[1]);
      }
    } else {
      console.log('‚ùå No redirect URL found in mock response');
    }

    // Test 3: Check for potential object-to-string conversion issues
    console.log('\n3. Testing for object-to-string conversion issues...');

    // Simulate potential problematic scenarios
    const testScenarios = [
      { name: 'String frontendUrl', value: 'http://localhost:5173' },
      { name: 'Object frontendUrl', value: { url: 'http://localhost:5173' } },
      { name: 'Array frontendUrl', value: ['http://localhost:5173'] },
      { name: 'Undefined frontendUrl', value: undefined },
      { name: 'Null frontendUrl', value: null }
    ];

    testScenarios.forEach(scenario => {
      const testUrl = `${scenario.value}?auth=success`;
      console.log(`   ${scenario.name}: "${testUrl}"`);

      if (testUrl.includes('[object Object]')) {
        console.log(`   ‚ùå ${scenario.name} causes [object Object] issue!`);
      }
    });

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

testOAuthCallback();
